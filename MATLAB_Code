# Following code was used to study the LM method in the project.
# This code also shows the implementation of other methods for comparison. It includes the code for electric nose, function approximation, fluid flow and image processing.

# Code for Electric Nose
[x1,t1] = chemical_dataset;
x = x1(1 : 5, 1 : 200) ;
t = t1(1, 1 : 200) ;
net = fitnet([7 13]) ;  % for LM method
net = train(net, x, t) ;
view(net) ;
y = net(x) ;
and,
net = patternnet([7 13]);  % for Backpropagation method
x1 = [2, 5, 11];  % LM values for 25-13, 10-7 and 7-13 neurons
y1 = [27.0312, 7.566, 6.6427];
plot (x1,y1);
hold
x2 = [41, 5, 20];  % BP values for 25-13, 10-7 and 7-13 neurons
y2 = [9.2123, 16.8311, 22.613];
plot (x2, y2);
grid on;
title (‘comparison’);
xlabel (‘epochs’);
ylabel (‘MSE’);
legend (‘LM’, ‘BP’);

# Code for Function Approximation
x = [-2, 0.05, 2];
y = sin (0.3*x)/x;  % sine function used for approximation
net = fitnet (13) ;  % LM method, the number of neurons are varied as 13, 7, 25
net = train (net, x, y) ;
G = [14, 5.3077 e-05; 25, 2.8451 e-05; 50, 2.2578 e-05];  % obtained values of epochs and MSE for 25, 13 and 7 neurons 
net = patternnet (13) ;  % BP method, the number of neurons are varied as 13, 7, 25
net = train(net, x, y) ;
H = [116, 9.1142 e-05; 15, 0.0041455; 105, 0.00024302];  % obtained values of epochs and MSE for 25, 13 and 7 neurons
plot (G, ‘b’);
hold
plot (H, ‘g’);
xlabel (‘epochs’);
ylabel (‘MSE’);
title (‘comparison’);
legend (‘LM’,’BP’);

# Code for Fluid Flow
[x,t] = valve_dataset;
nnstart;  % neural network toolbox used for further study

# Code for Image Processing
Image = imread (‘coloredChips.png’);  % a picture read in variable ‘Image’
BW = im2bw (Image);  % black and white pixel values stored in the variable BW
x1 = BW;
x2 = BW;
x1 = x1 (:);  % 2D matrix converted to a 1D vector
x2 = x2 (:);
for i = 1: size (x1)   % the input to be fed to the network is a compliment of the required image 
    if x1 (i) == 0
       x1 (i) = 1;
    else
       x1 (i) = 0;
    end
end
x1 = x1’;  % the input and the target vectors are converted to row array from column array
x2 = x2’;
net = fitnet (13);  % LM method for image processing, the number of neurons are varied as 7, 13, 10 and 25
net = train (net, x1, x2);
out = net (x1) ;
x11 = reshape (x1, [391, 518]) ;  % the input and output arrays are converted back to 2D for display
out1 = reshape (out, [391,518]);
imshow (x11);
imshow (out1);
net = patternnet (13);  % BP method for image processing, the number of neurons are varied as 7, 13, 10 and 25
net = train (net, x1, x2);
out = net (x1) ;
x11 = reshape (x1, [391, 518]) ;  % the input and output arrays are converted back to 2D for display
out1 = reshape (out, [391,518]);
imshow (x11);
imshow (out1);
p1 = [7, 10, 13, 25];  % number of neurons in hidden layer for LM network
q1 = [1.5419e-17, 1.5895e-19, 1.3898e-21, 3.1846e-22];  % MSE values for respective number of neurons for LM method
plot (p1, q1);
grid on;
xlabel (‘neurons in hidden layer’);
ylabel (‘MSE’);
title (‘LM network performance (epochs=3)’);
legend (‘LM’);
p2 = [7, 10, 13, 25];  % number of neurons in hidden layer for BP network
q2 = [3.9531e-07, 2.5079e-07, 2.7716e-07, 1.2178e-07];  % best validation performance values for respective number of neurons for BP method
plot (p2, q2);
grid on;
xlabel (‘neurons in hidden layer’);
ylabel (‘best validation performance (using cross-entropy)’);
title (‘BP network performance (epochs=approx. 16)’);
legend (‘BP’);
